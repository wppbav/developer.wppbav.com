"use strict";(self.webpackChunkthe_fount=self.webpackChunkthe_fount||[]).push([[428],{3078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"customizing/includes","title":"Includes","description":"The BAV The Fount API is expansive and contains many relationships. Loading all of these for every request by default","source":"@site/docs/customizing/includes.md","sourceDirName":"customizing","slug":"/customizing/includes","permalink":"/docs/2.x/customizing/includes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Filters & Sorting","permalink":"/docs/2.x/customizing/filters"},"next":{"title":"Brands","permalink":"/docs/2.x/brands/"}}');var a=t(4848),i=t(8453);const o={},r="Includes",d={},c=[{value:"Making a request",id:"making-a-request",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"includes",children:"Includes"})}),"\n",(0,a.jsx)(n.p,{children:"The BAV The Fount API is expansive and contains many relationships. Loading all of these for every request by default\nwould make the request larger than necessary. Instead, we allow you to select which relationships you want to include\nusing the includes feature."}),"\n",(0,a.jsx)(n.p,{children:"Includes are available on both index and single resource endpoints."}),"\n",(0,a.jsx)(n.p,{children:"Each resource documentation contains a list of relationships and names that can be included."}),"\n",(0,a.jsx)(n.p,{children:"Included resources only contain a subset of the data that the relationship resource has to make the response leaner. If\nyou need the full data, please make a second query using the system ID to the respective endpoint. Both the full\nresponse schema and the slim, relationship schema is listed on each endpoint."}),"\n",(0,a.jsx)(n.admonition,{title:"Relationships are excluded by default",type:"note",children:(0,a.jsxs)(n.p,{children:["When you make a query to an endpoint that has relationships these are not loaded by default. For example, if you want to\naccess the sector for a brand (a relationship), you need to explicitly request it with the ",(0,a.jsx)(n.code,{children:"include"})," parameter."]})}),"\n",(0,a.jsx)(n.h2,{id:"making-a-request",children:"Making a request"}),"\n",(0,a.jsxs)(n.p,{children:["Adding an expansion is done by adding the ",(0,a.jsx)(n.code,{children:"include"})," query parameter, and passing a comma-separated string of\nrelationship names, like so:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",metastring:"request",children:"GET /api/v2/brands/369?include=sector\n"})}),"\n",(0,a.jsx)(n.p,{children:"This would result in the following response:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "id": 369,\n    "name": "Microsoft",\n    "sector": {\n      "id": 13,\n      "name": "Computer\\/Electronics"\n    },\n    "created_at": "2020-03-02T10:05:01.000000Z",\n    "updated_at": "2021-03-26T10:43:02.000000Z"\n  }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);