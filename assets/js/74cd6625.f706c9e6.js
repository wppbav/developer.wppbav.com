"use strict";(self.webpackChunkthe_fount=self.webpackChunkthe_fount||[]).push([[7332],{4302:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"customizing/filters","title":"Filters & Sorting","description":"Filters","source":"@site/docs/customizing/filters.md","sourceDirName":"customizing","slug":"/customizing/filters","permalink":"/docs/2.x/customizing/filters","draft":false,"unlisted":false,"editUrl":"https://github.com/wppbav/developer.wppbav.com/edit/main/docs/customizing/filters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Searching","permalink":"/docs/2.x/customizing/searching"},"next":{"title":"Includes","permalink":"/docs/2.x/customizing/includes"}}');var r=t(4848),s=t(8453);const a={},o="Filters & Sorting",l={},d=[{value:"Filters",id:"filters",level:2},{value:"Sorting Results",id:"sorting-results",level:2},{value:"Updated Since",id:"updated-since",level:2},{value:"Pagination",id:"pagination",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"filters--sorting",children:"Filters & Sorting"})}),"\n",(0,r.jsx)(n.h2,{id:"filters",children:"Filters"}),"\n",(0,r.jsx)(n.p,{children:"To allow you to retrieve only the data that you need each resource comes with a set of filters. Some filters are\nglobally available throughout all resources, while some are resource-specific."}),"\n",(0,r.jsx)(n.p,{children:"Each resource documentation contains a list of which fields are filterable. Below you'll find information for the\nglobally available filters."}),"\n",(0,r.jsxs)(n.p,{children:["Filters are applied via query parameters to the request URL. They are built up on the format: ",(0,r.jsx)(n.code,{children:"filter[field]=value"}),"."]}),"\n",(0,r.jsx)(n.p,{children:'For example, to search for brands with the name "Facebook" you would use the following request:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:"GET /api/v2/brands?filter[name]=Facebook\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:'In general all filters apart from ID filters are applied using a like/contains search. This means that a search for "\nFacebook" will also return "Facebook Messenger".'})}),"\n",(0,r.jsx)(n.h2,{id:"sorting-results",children:"Sorting Results"}),"\n",(0,r.jsxs)(n.p,{children:["All index resources can be sorted to present data in a specific order. Default sorting varies by resource and can be\nfound in the respective resource documentation. Generally resources are sorted by their ",(0,r.jsx)(n.code,{children:"id"})," field in ascending order."]}),"\n",(0,r.jsx)(n.p,{children:'Each resource also has a set number of "sortable fields". Each endpoint documentation will list which fields are\nsortable.'}),"\n",(0,r.jsxs)(n.p,{children:["You define the sort order by setting the ",(0,r.jsx)(n.code,{children:"sort"})," parameter and the field you want to sort on. To sort in descending order\nyou prefix the column with a minus ",(0,r.jsx)(n.code,{children:"-"})," sign."]}),"\n",(0,r.jsx)(n.p,{children:"A sorting query to show brands by name may look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:"# Sort in ascending order (A-Z).\nGET /api/v2/brands?sort=name\n\n# Sort in descending order (Z-A).\nGET /api/v2/brands?sort=-name\n"})}),"\n",(0,r.jsx)(n.h2,{id:"updated-since",children:"Updated Since"}),"\n",(0,r.jsxs)(n.p,{children:["You may choose to retrieve data on an index request that has been updated after a specific date and time. This is done\nvia the ",(0,r.jsx)(n.code,{children:"updated_since"})," filter. This takes a date time value of ",(0,r.jsx)(n.code,{children:"YYYY-MM-DD HH:II:SS"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"A request to show brands that have been updated only after January 1, 2023 may look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:"GET /api/v2/brands?filter[updated_since]=2023-01-01\n"})}),"\n",(0,r.jsx)(n.p,{children:"Please note that update times are generally shallow. For example, if a brand's brandscape data is updated, the updated\ntimestamp for the brand itself does not change. However, if the brand itself receives an update to its global brand\nname, the timestamp is changed."}),"\n",(0,r.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,r.jsxs)(n.p,{children:["Please refer to the ",(0,r.jsx)(n.a,{href:"/docs/2.x/pagination",children:"pagination section"})," of the documentation for more information on pagination."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);